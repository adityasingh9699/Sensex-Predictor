{"ast":null,"code":"var _jsxFileName = \"/Users/adityakumarsingh/Documents/Hackathon/Sensex-Predictor/frontend/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\nfunction App() {\n  _s();\n  const [prediction, setPrediction] = useState(null);\n  const [historicalData, setHistoricalData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [predictionRes, historicalRes] = await Promise.all([axios.get(`${API_BASE_URL}/predict`), axios.get(`${API_BASE_URL}/historical-data`)]);\n        setPrediction(predictionRes.data);\n        setHistoricalData(historicalRes.data);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'An error occurred';\n        setError(errorMessage);\n        console.error('Error fetching data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n    // Refresh data every 5 minutes\n    const interval = setInterval(fetchData, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Sensex Predictor\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [prediction && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"prediction-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Market Prediction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"metrics\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Predicted Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"\\u20B9\", prediction.predicted_close.toLocaleString()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Trend\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: prediction.trend,\n              children: prediction.trend.toUpperCase()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"metric\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: \"Confidence\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [(prediction.confidence * 100).toFixed(1), \"%\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), historicalData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Historical Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LineChart, {\n          width: 800,\n          height: 400,\n          data: historicalData,\n          children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n            strokeDasharray: \"3 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n            dataKey: \"timestamp\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"close\",\n            stroke: \"#8884d8\",\n            name: \"Close Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Line, {\n            type: \"monotone\",\n            dataKey: \"predicted_close\",\n            stroke: \"#82ca9d\",\n            name: \"Predicted\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"H5/vVKg4hJ5p9XaQL+3qp43cuFc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","jsxDEV","_jsxDEV","API_BASE_URL","App","_s","prediction","setPrediction","historicalData","setHistoricalData","loading","setLoading","error","setError","fetchData","predictionRes","historicalRes","Promise","all","get","data","err","errorMessage","Error","message","console","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","className","predicted_close","toLocaleString","trend","toUpperCase","confidence","toFixed","length","width","height","strokeDasharray","dataKey","type","stroke","name","_c","$RefreshReg$"],"sources":["/Users/adityakumarsingh/Documents/Hackathon/Sensex-Predictor/frontend/src/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport './App.css';\n\nconst API_BASE_URL = 'http://localhost:8000/api/v1';\n\ninterface Prediction {\n  timestamp: string;\n  predicted_close: number;\n  confidence: number;\n  trend: 'up' | 'down';\n  supporting_factors: string[];\n}\n\ninterface HistoricalData {\n  timestamp: string;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n  predicted_close?: number;\n}\n\nfunction App() {\n  const [prediction, setPrediction] = useState<Prediction | null>(null);\n  const [historicalData, setHistoricalData] = useState<HistoricalData[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const [predictionRes, historicalRes] = await Promise.all([\n          axios.get<Prediction>(`${API_BASE_URL}/predict`),\n          axios.get<HistoricalData[]>(`${API_BASE_URL}/historical-data`)\n        ]);\n        setPrediction(predictionRes.data);\n        setHistoricalData(historicalRes.data);\n      } catch (err) {\n        const errorMessage = err instanceof Error ? err.message : 'An error occurred';\n        setError(errorMessage);\n        console.error('Error fetching data:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n    // Refresh data every 5 minutes\n    const interval = setInterval(fetchData, 5 * 60 * 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Sensex Predictor</h1>\n      </header>\n      \n      <main>\n        {prediction && (\n          <div className=\"prediction-section\">\n            <h2>Market Prediction</h2>\n            <div className=\"metrics\">\n              <div className=\"metric\">\n                <h3>Predicted Close</h3>\n                <p>₹{prediction.predicted_close.toLocaleString()}</p>\n              </div>\n              <div className=\"metric\">\n                <h3>Trend</h3>\n                <p className={prediction.trend}>{prediction.trend.toUpperCase()}</p>\n              </div>\n              <div className=\"metric\">\n                <h3>Confidence</h3>\n                <p>{(prediction.confidence * 100).toFixed(1)}%</p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {historicalData.length > 0 && (\n          <div className=\"chart-section\">\n            <h2>Historical Data</h2>\n            <LineChart width={800} height={400} data={historicalData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"timestamp\" />\n              <YAxis />\n              <Tooltip />\n              <Legend />\n              <Line type=\"monotone\" dataKey=\"close\" stroke=\"#8884d8\" name=\"Close Price\" />\n              <Line type=\"monotone\" dataKey=\"predicted_close\" stroke=\"#82ca9d\" name=\"Predicted\" />\n            </LineChart>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,EAAEC,aAAa,EAAEC,OAAO,EAAEC,MAAM,QAAQ,UAAU;AACxF,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,MAAMC,YAAY,GAAG,8BAA8B;AAoBnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAoB,IAAI,CAAC;EACrE,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAmB,EAAE,CAAC;EAC1E,MAAM,CAACkB,OAAO,EAAEC,UAAU,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACoB,KAAK,EAAEC,QAAQ,CAAC,GAAGrB,QAAQ,CAAgB,IAAI,CAAC;EAEvDD,SAAS,CAAC,MAAM;IACd,MAAMuB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACFH,UAAU,CAAC,IAAI,CAAC;QAChB,MAAM,CAACI,aAAa,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACvDzB,KAAK,CAAC0B,GAAG,CAAa,GAAGhB,YAAY,UAAU,CAAC,EAChDV,KAAK,CAAC0B,GAAG,CAAmB,GAAGhB,YAAY,kBAAkB,CAAC,CAC/D,CAAC;QACFI,aAAa,CAACQ,aAAa,CAACK,IAAI,CAAC;QACjCX,iBAAiB,CAACO,aAAa,CAACI,IAAI,CAAC;MACvC,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZ,MAAMC,YAAY,GAAGD,GAAG,YAAYE,KAAK,GAAGF,GAAG,CAACG,OAAO,GAAG,mBAAmB;QAC7EX,QAAQ,CAACS,YAAY,CAAC;QACtBG,OAAO,CAACb,KAAK,CAAC,sBAAsB,EAAES,GAAG,CAAC;MAC5C,CAAC,SAAS;QACRV,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,SAAS,CAAC,CAAC;IACX;IACA,MAAMY,QAAQ,GAAGC,WAAW,CAACb,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC;IACtD,OAAO,MAAMc,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIhB,OAAO,EAAE,oBAAOR,OAAA;IAAA2B,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAIrB,KAAK,EAAE,oBAAOV,OAAA;IAAA2B,QAAA,GAAK,SAAO,EAACjB,KAAK;EAAA;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,oBACE/B,OAAA;IAAKgC,SAAS,EAAC,KAAK;IAAAL,QAAA,gBAClB3B,OAAA;MAAQgC,SAAS,EAAC,YAAY;MAAAL,QAAA,eAC5B3B,OAAA;QAAA2B,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eAET/B,OAAA;MAAA2B,QAAA,GACGvB,UAAU,iBACTJ,OAAA;QAAKgC,SAAS,EAAC,oBAAoB;QAAAL,QAAA,gBACjC3B,OAAA;UAAA2B,QAAA,EAAI;QAAiB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1B/B,OAAA;UAAKgC,SAAS,EAAC,SAAS;UAAAL,QAAA,gBACtB3B,OAAA;YAAKgC,SAAS,EAAC,QAAQ;YAAAL,QAAA,gBACrB3B,OAAA;cAAA2B,QAAA,EAAI;YAAe;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACxB/B,OAAA;cAAA2B,QAAA,GAAG,QAAC,EAACvB,UAAU,CAAC6B,eAAe,CAACC,cAAc,CAAC,CAAC;YAAA;cAAAN,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAClD,CAAC,eACN/B,OAAA;YAAKgC,SAAS,EAAC,QAAQ;YAAAL,QAAA,gBACrB3B,OAAA;cAAA2B,QAAA,EAAI;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACd/B,OAAA;cAAGgC,SAAS,EAAE5B,UAAU,CAAC+B,KAAM;cAAAR,QAAA,EAAEvB,UAAU,CAAC+B,KAAK,CAACC,WAAW,CAAC;YAAC;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACjE,CAAC,eACN/B,OAAA;YAAKgC,SAAS,EAAC,QAAQ;YAAAL,QAAA,gBACrB3B,OAAA;cAAA2B,QAAA,EAAI;YAAU;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC,eACnB/B,OAAA;cAAA2B,QAAA,GAAI,CAACvB,UAAU,CAACiC,UAAU,GAAG,GAAG,EAAEC,OAAO,CAAC,CAAC,CAAC,EAAC,GAAC;YAAA;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAC/C,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH,CACN,EAEAzB,cAAc,CAACiC,MAAM,GAAG,CAAC,iBACxBvC,OAAA;QAAKgC,SAAS,EAAC,eAAe;QAAAL,QAAA,gBAC5B3B,OAAA;UAAA2B,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB/B,OAAA,CAACR,SAAS;UAACgD,KAAK,EAAE,GAAI;UAACC,MAAM,EAAE,GAAI;UAACvB,IAAI,EAAEZ,cAAe;UAAAqB,QAAA,gBACvD3B,OAAA,CAACJ,aAAa;YAAC8C,eAAe,EAAC;UAAK;YAAAd,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACvC/B,OAAA,CAACN,KAAK;YAACiD,OAAO,EAAC;UAAW;YAAAf,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC7B/B,OAAA,CAACL,KAAK;YAAAiC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACT/B,OAAA,CAACH,OAAO;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACX/B,OAAA,CAACF,MAAM;YAAA8B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACV/B,OAAA,CAACP,IAAI;YAACmD,IAAI,EAAC,UAAU;YAACD,OAAO,EAAC,OAAO;YAACE,MAAM,EAAC,SAAS;YAACC,IAAI,EAAC;UAAa;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eAC5E/B,OAAA,CAACP,IAAI;YAACmD,IAAI,EAAC,UAAU;YAACD,OAAO,EAAC,iBAAiB;YAACE,MAAM,EAAC,SAAS;YAACC,IAAI,EAAC;UAAW;YAAAlB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3E,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACT,CACN;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC5B,EAAA,CA9EQD,GAAG;AAAA6C,EAAA,GAAH7C,GAAG;AAgFZ,eAAeA,GAAG;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}